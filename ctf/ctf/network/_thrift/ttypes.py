#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EBotState:
  UNKNOWN = 0
  IDLE = 1
  DEFENDING = 2
  SPRINTING = 3
  ATTACKING = 4
  CHARGING = 5
  SHOOTING = 6
  TAKINGORDERS = 7
  HOLDING = 8
  DEAD = 9

  _VALUES_TO_NAMES = {
    0: "UNKNOWN",
    1: "IDLE",
    2: "DEFENDING",
    3: "SPRINTING",
    4: "ATTACKING",
    5: "CHARGING",
    6: "SHOOTING",
    7: "TAKINGORDERS",
    8: "HOLDING",
    9: "DEAD",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN": 0,
    "IDLE": 1,
    "DEFENDING": 2,
    "SPRINTING": 3,
    "ATTACKING": 4,
    "CHARGING": 5,
    "SHOOTING": 6,
    "TAKINGORDERS": 7,
    "HOLDING": 8,
    "DEAD": 9,
  }

class EOrderType:
  DEFEND = 0
  ATTACK = 1
  CHARGE = 2
  SPRINT = 3

  _VALUES_TO_NAMES = {
    0: "DEFEND",
    1: "ATTACK",
    2: "CHARGE",
    3: "SPRINT",
  }

  _NAMES_TO_VALUES = {
    "DEFEND": 0,
    "ATTACK": 1,
    "CHARGE": 2,
    "SPRINT": 3,
  }


class TVector2:
  """
  Attributes:
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'x', None, None, ), # 1
    (2, TType.DOUBLE, 'y', None, None, ), # 2
  )

  def __init__(self, x=None, y=None,):
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TVector2')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 1)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 2)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TArea2:
  """
  Attributes:
   - start
   - finish
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'start', (TVector2, TVector2.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'finish', (TVector2, TVector2.thrift_spec), None, ), # 2
  )

  def __init__(self, start=None, finish=None,):
    self.start = start
    self.finish = finish

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.start = TVector2()
          self.start.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.finish = TVector2()
          self.finish.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TArea2')
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.STRUCT, 1)
      self.start.write(oprot)
      oprot.writeFieldEnd()
    if self.finish is not None:
      oprot.writeFieldBegin('finish', TType.STRUCT, 2)
      self.finish.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TBot:
  """
  Attributes:
   - name
   - team
   - flag
   - seenLast
   - health
   - state
   - position
   - facingDirection
   - visibleEnemies
   - seenByEnemies
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'team', None, None, ), # 2
    (3, TType.STRING, 'flag', None, None, ), # 3
    (4, TType.DOUBLE, 'seenLast', None, None, ), # 4
    (5, TType.DOUBLE, 'health', None, None, ), # 5
    (6, TType.I32, 'state', None, None, ), # 6
    (7, TType.STRUCT, 'position', (TVector2, TVector2.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'facingDirection', (TVector2, TVector2.thrift_spec), None, ), # 8
    (9, TType.LIST, 'visibleEnemies', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'seenByEnemies', (TType.STRING,None), None, ), # 10
  )

  def __init__(self, name=None, team=None, flag=None, seenLast=None, health=None, state=None, position=None, facingDirection=None, visibleEnemies=None, seenByEnemies=None,):
    self.name = name
    self.team = team
    self.flag = flag
    self.seenLast = seenLast
    self.health = health
    self.state = state
    self.position = position
    self.facingDirection = facingDirection
    self.visibleEnemies = visibleEnemies
    self.seenByEnemies = seenByEnemies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.team = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.seenLast = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.health = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.position = TVector2()
          self.position.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.facingDirection = TVector2()
          self.facingDirection.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.visibleEnemies = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.visibleEnemies.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.seenByEnemies = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.seenByEnemies.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TBot')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.team is not None:
      oprot.writeFieldBegin('team', TType.STRING, 2)
      oprot.writeString(self.team)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.STRING, 3)
      oprot.writeString(self.flag)
      oprot.writeFieldEnd()
    if self.seenLast is not None:
      oprot.writeFieldBegin('seenLast', TType.DOUBLE, 4)
      oprot.writeDouble(self.seenLast)
      oprot.writeFieldEnd()
    if self.health is not None:
      oprot.writeFieldBegin('health', TType.DOUBLE, 5)
      oprot.writeDouble(self.health)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 6)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRUCT, 7)
      self.position.write(oprot)
      oprot.writeFieldEnd()
    if self.facingDirection is not None:
      oprot.writeFieldBegin('facingDirection', TType.STRUCT, 8)
      self.facingDirection.write(oprot)
      oprot.writeFieldEnd()
    if self.visibleEnemies is not None:
      oprot.writeFieldBegin('visibleEnemies', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.visibleEnemies))
      for iter12 in self.visibleEnemies:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.seenByEnemies is not None:
      oprot.writeFieldBegin('seenByEnemies', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.seenByEnemies))
      for iter13 in self.seenByEnemies:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTeam:
  """
  Attributes:
   - name
   - faction
   - members
   - flags
   - flagSpawnLocations
   - flagScoreLocations
   - botSpawnAreas
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.BYTE, 'faction', None, None, ), # 2
    (3, TType.LIST, 'members', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'flags', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'flagSpawnLocations', (TType.STRUCT,(TVector2, TVector2.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'flagScoreLocations', (TType.STRUCT,(TArea2, TArea2.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'botSpawnAreas', (TType.STRUCT,(TArea2, TArea2.thrift_spec)), None, ), # 7
  )

  def __init__(self, name=None, faction=None, members=None, flags=None, flagSpawnLocations=None, flagScoreLocations=None, botSpawnAreas=None,):
    self.name = name
    self.faction = faction
    self.members = members
    self.flags = flags
    self.flagSpawnLocations = flagSpawnLocations
    self.flagScoreLocations = flagScoreLocations
    self.botSpawnAreas = botSpawnAreas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.faction = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.members = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.members.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.flags = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString();
            self.flags.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.flagSpawnLocations = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = TVector2()
            _elem31.read(iprot)
            self.flagSpawnLocations.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.flagScoreLocations = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = TArea2()
            _elem37.read(iprot)
            self.flagScoreLocations.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.botSpawnAreas = []
          (_etype41, _size38) = iprot.readListBegin()
          for _i42 in xrange(_size38):
            _elem43 = TArea2()
            _elem43.read(iprot)
            self.botSpawnAreas.append(_elem43)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTeam')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.faction is not None:
      oprot.writeFieldBegin('faction', TType.BYTE, 2)
      oprot.writeByte(self.faction)
      oprot.writeFieldEnd()
    if self.members is not None:
      oprot.writeFieldBegin('members', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.members))
      for iter44 in self.members:
        oprot.writeString(iter44)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.flags))
      for iter45 in self.flags:
        oprot.writeString(iter45)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flagSpawnLocations is not None:
      oprot.writeFieldBegin('flagSpawnLocations', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.flagSpawnLocations))
      for iter46 in self.flagSpawnLocations:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flagScoreLocations is not None:
      oprot.writeFieldBegin('flagScoreLocations', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.flagScoreLocations))
      for iter47 in self.flagScoreLocations:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.botSpawnAreas is not None:
      oprot.writeFieldBegin('botSpawnAreas', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.botSpawnAreas))
      for iter48 in self.botSpawnAreas:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TFlag:
  """
  Attributes:
   - name
   - team
   - position
   - respawnTimer
   - carrier
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'team', None, None, ), # 2
    (3, TType.STRUCT, 'position', (TVector2, TVector2.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'respawnTimer', None, None, ), # 4
    (5, TType.STRING, 'carrier', None, None, ), # 5
  )

  def __init__(self, name=None, team=None, position=None, respawnTimer=None, carrier=None,):
    self.name = name
    self.team = team
    self.position = position
    self.respawnTimer = respawnTimer
    self.carrier = carrier

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.team = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.position = TVector2()
          self.position.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.respawnTimer = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.carrier = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TFlag')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.team is not None:
      oprot.writeFieldBegin('team', TType.STRING, 2)
      oprot.writeString(self.team)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRUCT, 3)
      self.position.write(oprot)
      oprot.writeFieldEnd()
    if self.respawnTimer is not None:
      oprot.writeFieldBegin('respawnTimer', TType.DOUBLE, 4)
      oprot.writeDouble(self.respawnTimer)
      oprot.writeFieldEnd()
    if self.carrier is not None:
      oprot.writeFieldBegin('carrier', TType.STRING, 5)
      oprot.writeString(self.carrier)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TMatch:
  """
  Attributes:
   - scores
   - timeRemaining
   - timeToNextRespawn
   - timePassed
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'scores', (TType.STRING,None,TType.I32,None), None, ), # 1
    (2, TType.DOUBLE, 'timeRemaining', None, None, ), # 2
    (3, TType.DOUBLE, 'timeToNextRespawn', None, None, ), # 3
    (4, TType.DOUBLE, 'timePassed', None, None, ), # 4
  )

  def __init__(self, scores=None, timeRemaining=None, timeToNextRespawn=None, timePassed=None,):
    self.scores = scores
    self.timeRemaining = timeRemaining
    self.timeToNextRespawn = timeToNextRespawn
    self.timePassed = timePassed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.scores = {}
          (_ktype50, _vtype51, _size49 ) = iprot.readMapBegin() 
          for _i53 in xrange(_size49):
            _key54 = iprot.readString();
            _val55 = iprot.readI32();
            self.scores[_key54] = _val55
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.timeRemaining = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.timeToNextRespawn = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.timePassed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TMatch')
    if self.scores is not None:
      oprot.writeFieldBegin('scores', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.scores))
      for kiter56,viter57 in self.scores.items():
        oprot.writeString(kiter56)
        oprot.writeI32(viter57)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.timeRemaining is not None:
      oprot.writeFieldBegin('timeRemaining', TType.DOUBLE, 2)
      oprot.writeDouble(self.timeRemaining)
      oprot.writeFieldEnd()
    if self.timeToNextRespawn is not None:
      oprot.writeFieldBegin('timeToNextRespawn', TType.DOUBLE, 3)
      oprot.writeDouble(self.timeToNextRespawn)
      oprot.writeFieldEnd()
    if self.timePassed is not None:
      oprot.writeFieldBegin('timePassed', TType.DOUBLE, 4)
      oprot.writeDouble(self.timePassed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TState:
  """
  Attributes:
   - match
   - teams
   - bots
   - flags
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'match', (TMatch, TMatch.thrift_spec), None, ), # 1
    (2, TType.MAP, 'teams', (TType.STRING,None,TType.STRUCT,(TTeam, TTeam.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'bots', (TType.STRING,None,TType.STRUCT,(TBot, TBot.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'flags', (TType.STRING,None,TType.STRUCT,(TFlag, TFlag.thrift_spec)), None, ), # 4
  )

  def __init__(self, match=None, teams=None, bots=None, flags=None,):
    self.match = match
    self.teams = teams
    self.bots = bots
    self.flags = flags

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.match = TMatch()
          self.match.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.teams = {}
          (_ktype59, _vtype60, _size58 ) = iprot.readMapBegin() 
          for _i62 in xrange(_size58):
            _key63 = iprot.readString();
            _val64 = TTeam()
            _val64.read(iprot)
            self.teams[_key63] = _val64
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.bots = {}
          (_ktype66, _vtype67, _size65 ) = iprot.readMapBegin() 
          for _i69 in xrange(_size65):
            _key70 = iprot.readString();
            _val71 = TBot()
            _val71.read(iprot)
            self.bots[_key70] = _val71
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.flags = {}
          (_ktype73, _vtype74, _size72 ) = iprot.readMapBegin() 
          for _i76 in xrange(_size72):
            _key77 = iprot.readString();
            _val78 = TFlag()
            _val78.read(iprot)
            self.flags[_key77] = _val78
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TState')
    if self.match is not None:
      oprot.writeFieldBegin('match', TType.STRUCT, 1)
      self.match.write(oprot)
      oprot.writeFieldEnd()
    if self.teams is not None:
      oprot.writeFieldBegin('teams', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.teams))
      for kiter79,viter80 in self.teams.items():
        oprot.writeString(kiter79)
        viter80.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bots is not None:
      oprot.writeFieldBegin('bots', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.bots))
      for kiter81,viter82 in self.bots.items():
        oprot.writeString(kiter81)
        viter82.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.flags is not None:
      oprot.writeFieldBegin('flags', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.flags))
      for kiter83,viter84 in self.flags.items():
        oprot.writeString(kiter83)
        viter84.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TLevel:
  """
  Attributes:
   - width
   - height
   - blockHeights
   - teamNames
   - flagSpawnLocations
   - flagScoreLocations
   - botSpawnAreas
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'width', None, None, ), # 1
    (2, TType.I32, 'height', None, None, ), # 2
    (3, TType.LIST, 'blockHeights', (TType.LIST,(TType.BYTE,None)), None, ), # 3
    (4, TType.LIST, 'teamNames', (TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'flagSpawnLocations', (TType.STRING,None,TType.LIST,(TType.STRUCT,(TVector2, TVector2.thrift_spec))), None, ), # 5
    (6, TType.MAP, 'flagScoreLocations', (TType.STRING,None,TType.LIST,(TType.STRUCT,(TArea2, TArea2.thrift_spec))), None, ), # 6
    (7, TType.MAP, 'botSpawnAreas', (TType.STRING,None,TType.LIST,(TType.STRUCT,(TArea2, TArea2.thrift_spec))), None, ), # 7
  )

  def __init__(self, width=None, height=None, blockHeights=None, teamNames=None, flagSpawnLocations=None, flagScoreLocations=None, botSpawnAreas=None,):
    self.width = width
    self.height = height
    self.blockHeights = blockHeights
    self.teamNames = teamNames
    self.flagSpawnLocations = flagSpawnLocations
    self.flagScoreLocations = flagScoreLocations
    self.botSpawnAreas = botSpawnAreas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.blockHeights = []
          (_etype88, _size85) = iprot.readListBegin()
          for _i89 in xrange(_size85):
            _elem90 = []
            (_etype94, _size91) = iprot.readListBegin()
            for _i95 in xrange(_size91):
              _elem96 = iprot.readByte();
              _elem90.append(_elem96)
            iprot.readListEnd()
            self.blockHeights.append(_elem90)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.teamNames = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = iprot.readString();
            self.teamNames.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.flagSpawnLocations = {}
          (_ktype104, _vtype105, _size103 ) = iprot.readMapBegin() 
          for _i107 in xrange(_size103):
            _key108 = iprot.readString();
            _val109 = []
            (_etype113, _size110) = iprot.readListBegin()
            for _i114 in xrange(_size110):
              _elem115 = TVector2()
              _elem115.read(iprot)
              _val109.append(_elem115)
            iprot.readListEnd()
            self.flagSpawnLocations[_key108] = _val109
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.flagScoreLocations = {}
          (_ktype117, _vtype118, _size116 ) = iprot.readMapBegin() 
          for _i120 in xrange(_size116):
            _key121 = iprot.readString();
            _val122 = []
            (_etype126, _size123) = iprot.readListBegin()
            for _i127 in xrange(_size123):
              _elem128 = TArea2()
              _elem128.read(iprot)
              _val122.append(_elem128)
            iprot.readListEnd()
            self.flagScoreLocations[_key121] = _val122
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.botSpawnAreas = {}
          (_ktype130, _vtype131, _size129 ) = iprot.readMapBegin() 
          for _i133 in xrange(_size129):
            _key134 = iprot.readString();
            _val135 = []
            (_etype139, _size136) = iprot.readListBegin()
            for _i140 in xrange(_size136):
              _elem141 = TArea2()
              _elem141.read(iprot)
              _val135.append(_elem141)
            iprot.readListEnd()
            self.botSpawnAreas[_key134] = _val135
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TLevel')
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 1)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 2)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.blockHeights is not None:
      oprot.writeFieldBegin('blockHeights', TType.LIST, 3)
      oprot.writeListBegin(TType.LIST, len(self.blockHeights))
      for iter142 in self.blockHeights:
        oprot.writeListBegin(TType.BYTE, len(iter142))
        for iter143 in iter142:
          oprot.writeByte(iter143)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.teamNames is not None:
      oprot.writeFieldBegin('teamNames', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.teamNames))
      for iter144 in self.teamNames:
        oprot.writeString(iter144)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flagSpawnLocations is not None:
      oprot.writeFieldBegin('flagSpawnLocations', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.flagSpawnLocations))
      for kiter145,viter146 in self.flagSpawnLocations.items():
        oprot.writeString(kiter145)
        oprot.writeListBegin(TType.STRUCT, len(viter146))
        for iter147 in viter146:
          iter147.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.flagScoreLocations is not None:
      oprot.writeFieldBegin('flagScoreLocations', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.flagScoreLocations))
      for kiter148,viter149 in self.flagScoreLocations.items():
        oprot.writeString(kiter148)
        oprot.writeListBegin(TType.STRUCT, len(viter149))
        for iter150 in viter149:
          iter150.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.botSpawnAreas is not None:
      oprot.writeFieldBegin('botSpawnAreas', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.botSpawnAreas))
      for kiter151,viter152 in self.botSpawnAreas.items():
        oprot.writeString(kiter151)
        oprot.writeListBegin(TType.STRUCT, len(viter152))
        for iter153 in viter152:
          iter153.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TSettings:
  """
  Attributes:
   - fieldOfViewAngles
   - characterRadius
   - firingDistance
   - walkingSpeed
   - runningSpeed
   - gameDuration
   - initializationTime
   - respawnDelay
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fieldOfViewAngles', (TType.DOUBLE,None), None, ), # 1
    (2, TType.DOUBLE, 'characterRadius', None, None, ), # 2
    (3, TType.DOUBLE, 'firingDistance', None, None, ), # 3
    (4, TType.DOUBLE, 'walkingSpeed', None, None, ), # 4
    (5, TType.DOUBLE, 'runningSpeed', None, None, ), # 5
    (6, TType.DOUBLE, 'gameDuration', None, None, ), # 6
    (7, TType.DOUBLE, 'initializationTime', None, None, ), # 7
    (8, TType.DOUBLE, 'respawnDelay', None, None, ), # 8
  )

  def __init__(self, fieldOfViewAngles=None, characterRadius=None, firingDistance=None, walkingSpeed=None, runningSpeed=None, gameDuration=None, initializationTime=None, respawnDelay=None,):
    self.fieldOfViewAngles = fieldOfViewAngles
    self.characterRadius = characterRadius
    self.firingDistance = firingDistance
    self.walkingSpeed = walkingSpeed
    self.runningSpeed = runningSpeed
    self.gameDuration = gameDuration
    self.initializationTime = initializationTime
    self.respawnDelay = respawnDelay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fieldOfViewAngles = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = iprot.readDouble();
            self.fieldOfViewAngles.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.characterRadius = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.firingDistance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.walkingSpeed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.runningSpeed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.gameDuration = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.initializationTime = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.respawnDelay = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSettings')
    if self.fieldOfViewAngles is not None:
      oprot.writeFieldBegin('fieldOfViewAngles', TType.LIST, 1)
      oprot.writeListBegin(TType.DOUBLE, len(self.fieldOfViewAngles))
      for iter160 in self.fieldOfViewAngles:
        oprot.writeDouble(iter160)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.characterRadius is not None:
      oprot.writeFieldBegin('characterRadius', TType.DOUBLE, 2)
      oprot.writeDouble(self.characterRadius)
      oprot.writeFieldEnd()
    if self.firingDistance is not None:
      oprot.writeFieldBegin('firingDistance', TType.DOUBLE, 3)
      oprot.writeDouble(self.firingDistance)
      oprot.writeFieldEnd()
    if self.walkingSpeed is not None:
      oprot.writeFieldBegin('walkingSpeed', TType.DOUBLE, 4)
      oprot.writeDouble(self.walkingSpeed)
      oprot.writeFieldEnd()
    if self.runningSpeed is not None:
      oprot.writeFieldBegin('runningSpeed', TType.DOUBLE, 5)
      oprot.writeDouble(self.runningSpeed)
      oprot.writeFieldEnd()
    if self.gameDuration is not None:
      oprot.writeFieldBegin('gameDuration', TType.DOUBLE, 6)
      oprot.writeDouble(self.gameDuration)
      oprot.writeFieldEnd()
    if self.initializationTime is not None:
      oprot.writeFieldBegin('initializationTime', TType.DOUBLE, 7)
      oprot.writeDouble(self.initializationTime)
      oprot.writeFieldEnd()
    if self.respawnDelay is not None:
      oprot.writeFieldBegin('respawnDelay', TType.DOUBLE, 8)
      oprot.writeDouble(self.respawnDelay)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Order:
  """
  Attributes:
   - type
   - positions
   - facingDirections
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.LIST, 'positions', (TType.STRUCT,(TVector2, TVector2.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'facingDirections', (TType.STRUCT,(TVector2, TVector2.thrift_spec)), None, ), # 3
  )

  def __init__(self, type=None, positions=None, facingDirections=None,):
    self.type = type
    self.positions = positions
    self.facingDirections = facingDirections

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.positions = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = TVector2()
            _elem166.read(iprot)
            self.positions.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.facingDirections = []
          (_etype170, _size167) = iprot.readListBegin()
          for _i171 in xrange(_size167):
            _elem172 = TVector2()
            _elem172.read(iprot)
            self.facingDirections.append(_elem172)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Order')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.positions is not None:
      oprot.writeFieldBegin('positions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.positions))
      for iter173 in self.positions:
        iter173.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.facingDirections is not None:
      oprot.writeFieldBegin('facingDirections', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.facingDirections))
      for iter174 in self.facingDirections:
        iter174.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
